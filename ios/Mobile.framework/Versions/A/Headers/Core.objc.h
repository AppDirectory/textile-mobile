// Objective-C API for talking to github.com/textileio/textile-go/core Go package.
//   gobind -lang=objc github.com/textileio/textile-go/core
//
// File is generated by gobind. Do not edit.

#ifndef __Core_H__
#define __Core_H__

@import Foundation;
#include "Universe.objc.h"

#include "Net.objc.h"

@class CoreHashRequest;
@class CoreNodeConfig;
@class CorePhotoList;
@class CoreTextileNode;
@class CoreThreadUpdate;

/**
 * HashRequest represents a single-use gateway token
 */
@interface CoreHashRequest : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)token;
- (void)setToken:(NSString*)v;
- (NSString*)protocol;
- (void)setProtocol:(NSString*)v;
- (NSString*)host;
- (void)setHost:(NSString*)v;
@end

/**
 * NodeConfig is used to configure the node
 */
@interface CoreNodeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)repoPath;
- (void)setRepoPath:(NSString*)v;
- (NSString*)centralApiURL;
- (void)setCentralApiURL:(NSString*)v;
- (BOOL)isMobile;
- (void)setIsMobile:(BOOL)v;
- (BOOL)isServer;
- (void)setIsServer:(BOOL)v;
// skipped field NodeConfig.LogLevel with unsupported type: *types.Named

- (BOOL)logFiles;
- (void)setLogFiles:(BOOL)v;
- (NSString*)swarmPort;
- (void)setSwarmPort:(NSString*)v;
@end

/**
 * PhotoList contains a list of photo hashes
 */
@interface CorePhotoList : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
// skipped field PhotoList.Hashes with unsupported type: *types.Slice

@end

/**
 * TextileNode is the main node interface for textile functionality
 */
@interface CoreTextileNode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
// skipped field TextileNode.Context with unsupported type: *types.Named

// skipped field TextileNode.IpfsNode with unsupported type: *types.Pointer

/**
 * The path to the openbazaar repo in the file system
 */
- (NSString*)repoPath;
- (void)setRepoPath:(NSString*)v;
// skipped field TextileNode.Datastore with unsupported type: *types.Named

// skipped field TextileNode.Cancel with unsupported type: *types.Named

// skipped field TextileNode.GatewayProxy with unsupported type: *types.Pointer

// skipped field TextileNode.HashPasses with unsupported type: *types.Map

/**
 * The local password used to authenticate http gateway requests (username is TextileNode)
 */
- (NSString*)gatewayPassword;
- (void)setGatewayPassword:(NSString*)v;
// skipped field TextileNode.LeftRoomChs with unsupported type: *types.Map

/**
 * AddPhoto adds a photo and its thumbnail to an album
TODO: Make this available offline
 */
- (NetMultipartRequest*)addPhoto:(NSString*)path thumb:(NSString*)thumb album:(NSString*)album caption:(NSString*)caption error:(NSError**)error;
// skipped method TextileNode.ConnectToRoomPeers with unsupported parameter or return types

/**
 * CreateAlbum creates an album with a given name and mnemonic words
 */
- (BOOL)createAlbum:(NSString*)mnemonic name:(NSString*)name error:(NSError**)error;
/**
 * GatewayPort requests the active gateway port
 */
- (BOOL)gatewayPort:(long*)ret0_ error:(NSError**)error;
/**
 * GetAccessToken returns the current access_token (jwt) for central
 */
- (NSString*)getAccessToken:(NSError**)error;
// skipped method TextileNode.GetCaption with unsupported parameter or return types

// skipped method TextileNode.GetFile with unsupported parameter or return types

/**
 * GetFileBase64 returns data encoded as base64 under an ipfs path
 */
- (NSString*)getFileBase64:(NSString*)path error:(NSError**)error;
// skipped method TextileNode.GetHashRequest with unsupported parameter or return types

// skipped method TextileNode.GetLastHash with unsupported parameter or return types

// skipped method TextileNode.GetMetaData with unsupported parameter or return types

/**
 * GetPhotos paginates photos from the datastore
 */
- (CorePhotoList*)getPhotos:(NSString*)offsetId limit:(long)limit album:(NSString*)album;
/**
 * GetPublicPeerKeyString returns the base64 encoded public ipfs peer key
 */
- (NSString*)getPublicPeerKeyString:(NSError**)error;
/**
 * GetUsername returns the current user's username
 */
- (NSString*)getUsername:(NSError**)error;
/**
 * IsSignedIn returns whether or not a user is signed in
 */
- (BOOL)isSignedIn:(BOOL*)ret0_ error:(NSError**)error;
// skipped method TextileNode.JoinRoom with unsupported parameter or return types

/**
 * LeaveRoom with a given id
 */
- (void)leaveRoom:(NSString*)id_;
// skipped method TextileNode.LoadPhotoAndAlbum with unsupported parameter or return types

- (BOOL)online;
// skipped method TextileNode.PingPeer with unsupported parameter or return types

/**
 * SharePhoto re-encrypts a photo from an existing album and shares it into a different album
TODO: Make this available offline
 */
- (NetMultipartRequest*)sharePhoto:(NSString*)hash album:(NSString*)album caption:(NSString*)caption error:(NSError**)error;
// skipped method TextileNode.SignIn with unsupported parameter or return types

/**
 * SignOut deletes the locally saved user info (username and tokens)
 */
- (BOOL)signOut:(NSError**)error;
// skipped method TextileNode.SignUp with unsupported parameter or return types

/**
 * Start the node
 */
- (BOOL)start:(NSError**)error;
// skipped method TextileNode.StartGarbageCollection with unsupported parameter or return types

/**
 * Stop the node
 */
- (BOOL)stop:(NSError**)error;
// skipped method TextileNode.UnmarshalPrivatePeerKey with unsupported parameter or return types

/**
 * WaitForRoom to join
 */
- (void)waitForRoom;
@end

/**
 * ThreadUpdate is used to notify listeners about updates in a thread
 */
@interface CoreThreadUpdate : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)cid;
- (void)setCid:(NSString*)v;
- (NSString*)thread;
- (void)setThread:(NSString*)v;
- (NSString*)threadID;
- (void)setThreadID:(NSString*)v;
@end

FOUNDATION_EXPORT NSString* const CoreVersion;

@interface Core : NSObject
/**
 * ErrNodeNotRunning is an error for  when node stop is called on a nil node
 */
+ (NSError*) errNodeNotRunning;
+ (void) setErrNodeNotRunning:(NSError*)v;

/**
 * ErrNodeRunning is an error for when node start is called on a running node
 */
+ (NSError*) errNodeRunning;
+ (void) setErrNodeRunning:(NSError*)v;

/**
 * Node is the single TextileNode instance
 */
+ (CoreTextileNode*) node;
+ (void) setNode:(CoreTextileNode*)v;

@end

// skipped function NewNode with unsupported parameter or return types


#endif
